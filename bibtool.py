import re, sys

MAX_AUTHOR = 6
START_CITE_NUM = 1

bibdict = {}
with open(sys.argv[2],"r",encoding="utf-8") as bibfile:
	flag = False
	for line in bibfile:
		line = line.strip()
		if len(line) == 0:
			continue
		if line[0] == "@":
			flag = True
			bibtype, label = line.split("{")
			name = label[:-1]
			bibdict[name] = {"type": bibtype[1:]}
		elif flag and line[0] != "}":
			attr, context = line.split(" = ")
			attr = attr.strip()
			context = context.strip()
			context = context.replace("{","")
			context = context.replace("}","")
			if context[-1] == ",":
				context = context[:-1]
			bibdict[name][attr] = context
		elif flag and line[0] == "}":
			flag = False

def gen_citestr(cite):
	if cite.get("language","en") != "zh":
		if cite.get("author",-1) != -1:
			authors = cite["author"].split(" and ")
			authorstr = ""
			if len(authors) == 1:
				authorstr += authors[0] + ", "
			elif len(authors) == MAX_AUTHOR:
				for n,author in enumerate(authors,1):
					last, first = author.split(", ")
					authorstr += first + " " + last
					if n == MAX_AUTHOR - 1:
						authorstr += " and "
					else:
						authorstr += ", "
			else:
				for n,author in enumerate(authors,1):
					last, first = author.split(", ")
					authorstr += first + " " + last
					if n == MAX_AUTHOR:
						authorstr += " et al., "
						break
					else:
						authorstr += ", "
		title = cite["title"].replace("\\&","&")
		if cite["type"] == "book":
			citestr = authorstr + '"' + title + '" in ' \
				+ cite["publisher"] + ', ' + cite["year"] + '.'
		elif cite["type"] == "manual":
			citestr = cite["organization"] + ", " + title + ", " \
				+ cite["url"]
		else:
			if cite.get("journaltitle",-1) == -1:
				jtitle = cite["booktitle"]
			else:
				jtitle = cite["journaltitle"]
			citestr = authorstr + '"' + title + '" in ' \
				+ jtitle + ', ' + cite["year"] + '.'
	else:
		if cite["type"] == "journal":
			citestr = cite["author"] + ". " + cite["title"] + "[J]. " \
				+ cite["journaltitle"] + ', ' + cite["year"] + "({}):".format(cite["vol"]) \
				+ cite["page"] + '.'
		else: # book
			citestr = cite["author"] + ". " + cite["title"] + "[M]. " \
				+ cite["publisher"] + ', ' + cite["year"] + '.'
	return citestr

# for item in bibdict:
# 	print(gen_citestr(bibdict[item]))
# print(len(bibdict))
# sys.exit()

def parse_cite(cites,outbib):
	cites = cites[6:-1].split(",")
	citenum = []
	for cite in cites:
		citestr = gen_citestr(bibdict[cite])
		if bibdict[cite].get("num",-1) == -1:
			outbib.append(citestr)
			bibdict[cite]["num"] = len(outbib) + START_CITE_NUM - 1
		citenum.append(bibdict[cite]["num"])
	return citenum

outbib = []
outfile_name = "output.txt"
outfile = open(outfile_name,"w",encoding="utf-8")
outfile.write("# " + outfile_name + " - Generated by bibtool.py\n\n")
with open(sys.argv[1],"r",encoding="utf-8") as infile:
	for line in infile:
		if "\\cite" not in line:
			outfile.write(line)
		else: # citation
			cites_lst = re.findall(r"\\cite\{.*?\}",line)
			citenums = []
			for cites in cites_lst:
				citenum = parse_cite(cites,outbib)
				if len (citenum) > 2 and citenum[0] + len(citenum) - 1 == citenum[-1]:
					ref = "[{}-{}]".format(citenum[0],citenum[-1])
				else:
					ref = "[" + ",".join(map(str,citenum)) + "]"
				citenums.append(ref)
			line = re.sub(r"\\cite\{.*?\}","*",line)
			parts = line.split("*")
			newline = ""
			for i,part in enumerate(parts):
				newline += part + ("" if (i == len(parts)-1) else citenums[i])
			outfile.write(newline)

outfile.write("\n\nReference:\n")
for i,bib in enumerate(outbib):
	outfile.write("[{}] {}\n".format(i+START_CITE_NUM,bib))

outfile.close()